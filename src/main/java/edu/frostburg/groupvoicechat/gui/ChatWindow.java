/*
 * Copyright 2015 Russell Gilmore
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package edu.frostburg.groupvoicechat.gui;

import edu.frostburg.groupvoicechat.networking.PacketStruct;
import edu.frostburg.groupvoicechat.networking.events.EventRouter;
import edu.frostburg.groupvoicechat.networking.events.EventRouterState;
import edu.frostburg.groupvoicechat.networking.sockets.PacketSender;
import java.awt.EventQueue;
import java.io.IOException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 * Main window to drive the chatting.
 *
 * @author Kevin Raoofi
 * @author Russell Gilmore
 */
public class ChatWindow extends javax.swing.JFrame {

    private final EventRouter<EventRouterState> er;

    private final ConnectionController cc = new ConnectionController();

    String userName = "";

    /** Creates new form
     *
     * @param er */
    public ChatWindow(EventRouter<EventRouterState> er) {
        this.er = er;
        initComponents();
    }

    public void addMsg(String msg) {
        EventQueue.invokeLater(() -> {
            this.txtAreaMsgBox.append(msg);
        });
    }

    /** This method is called from within the constructor to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnDisconnect = new javax.swing.JButton();
        btnConnect = new javax.swing.JButton();
        txtAddress = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtPort = new javax.swing.JTextField();
        btnSettings = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPeers = new javax.swing.JTable();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAreaMsgBox = new javax.swing.JTextArea();
        txtSendMsg = new javax.swing.JTextField();
        btnSendMsg = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("GroupVoiceChat");

        btnDisconnect.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        btnDisconnect.setText("Disconnect");
        btnDisconnect.setEnabled(false);
        btnDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisconnectActionPerformed(evt);
            }
        });

        btnConnect.setFont(btnConnect.getFont().deriveFont(btnConnect.getFont().getSize()+13f));
        btnConnect.setText("Connect");
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });

        txtAddress.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtAddress.setText("131.118.80.40");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Address");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Port");

        txtPort.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtPort.setText("2556");

        btnSettings.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        btnSettings.setText("Settings");
        btnSettings.setEnabled(false);

        lblStatus.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblStatus.setText("Connected to 10.58.65.2");

        tblPeers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Russell", "10.155.21.1",  new Boolean(false)},
                {"Chelsea", "10.658.54.3",  new Boolean(true)},
                {"Brad", "10.232.21.1", null},
                {"Kevin", "10.235.45.5",  new Boolean(false)}
            },
            new String [] {
                "UserID", "Address", "Mute"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPeers);
        if (tblPeers.getColumnModel().getColumnCount() > 0) {
            tblPeers.getColumnModel().getColumn(0).setHeaderValue("UserID");
            tblPeers.getColumnModel().getColumn(1).setHeaderValue("Address");
            tblPeers.getColumnModel().getColumn(2).setHeaderValue("Mute");
        }

        txtAreaMsgBox.setEditable(false);
        txtAreaMsgBox.setColumns(20);
        txtAreaMsgBox.setRows(5);
        txtAreaMsgBox.setText("Brad: (System) has just connected\nLogan: I am thinking of going to enroll at Frostburg tomorrow...\nKevin: It is a great school. You should apply!\nRussell: (System) Has gone idle\nLogan: I will apply after I am off from work tomorrow!\nChelsea: I just enrolled, it was a very easy process.");
        jScrollPane2.setViewportView(txtAreaMsgBox);

        txtSendMsg.setText("This program is awesome!");
        txtSendMsg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSendMsgActionPerformed(evt);
            }
        });

        btnSendMsg.setText("Send");
        btnSendMsg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendMsgActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(110, 110, 110)
                                        .addComponent(filler1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(176, 176, 176))
                                    .addComponent(txtPort)
                                    .addComponent(txtAddress)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnConnect, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(2, 2, 2)
                                .addComponent(btnDisconnect)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSettings, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(4, 4, 4))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtSendMsg)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSendMsg))
                    .addComponent(lblStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSendMsg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSendMsg))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConnect)
                    .addComponent(btnDisconnect)
                    .addComponent(btnSettings))
                .addContainerGap())
        );

        lblStatus.getAccessibleContext().setAccessibleName("");
        lblStatus.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisconnectActionPerformed
        try {
            cc.quit();
            btnSendMsg.setEnabled(false);
            btnDisconnect.setEnabled(false);
            btnConnect.setEnabled(true);
        } catch (IOException ex) {
            Logger.getLogger(ChatWindow.class.getName())
                    .log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDisconnectActionPerformed

    private void btnSendMsgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendMsgActionPerformed
        try {
            cc.sendMsg(userName + ": " + txtSendMsg.getText() + "\n");
            txtSendMsg.setText("");
        } catch (IOException ex) {
            Logger.getLogger(ChatWindow.class.getName())
                    .log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSendMsgActionPerformed

    private void txtSendMsgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSendMsgActionPerformed
        btnSendMsgActionPerformed(evt);
    }//GEN-LAST:event_txtSendMsgActionPerformed

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
        try {
            cc.join();

            btnSendMsg.setEnabled(true);
            btnDisconnect.setEnabled(true);
            btnConnect.setEnabled(false);

        } catch (IOException ex) {
            Logger.getLogger(ChatWindow.class.getName())
                    .log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnConnectActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnDisconnect;
    private javax.swing.JButton btnSendMsg;
    private javax.swing.JButton btnSettings;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JTable tblPeers;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextArea txtAreaMsgBox;
    private javax.swing.JTextField txtPort;
    private javax.swing.JTextField txtSendMsg;
    // End of variables declaration//GEN-END:variables

    private class ConnectionController {

        PacketSender pSender = new PacketSender();

        public void join() throws IOException {
            // TODO: this is terrible
            userName = JOptionPane.showInputDialog("enter username");
            PacketStruct ps = new PacketStruct();
            ps.packetId = er.getState()
                    .getPeerId()
                    .incrementAndGet();
            ps.packetId = PacketStruct.PACKET_TYPE_CONNECTION;
            ps.time = System.currentTimeMillis();
            ps.senderAddress = InetAddress.getLocalHost();
            ps.payload = ("JOIN " + userName).getBytes();

            pSender.send(getIsa()
                    .getAddress(), getIsa()
                    .getPort(), ps);
        }

        public void quit() throws IOException {
            PacketStruct ps = new PacketStruct();
            ps.packetId = er.getState()
                    .getPeerId()
                    .incrementAndGet();
            ps.packetId = PacketStruct.PACKET_TYPE_CONNECTION;
            ps.time = System.currentTimeMillis();
            ps.senderAddress = InetAddress.getLocalHost();
            ps.payload = "QUIT".getBytes();

            pSender.send(getIsa()
                    .getAddress(), getIsa()
                    .getPort(), ps);
        }

        InetSocketAddress getIsa() {
            return InetSocketAddress.createUnresolved(txtAddress.getText(),
                    Integer.parseInt(txtPort.getText()));
        }

        public void sendMsg(String msg) throws IOException {
            PacketStruct ps = new PacketStruct();
            ps.packetId = er.getState()
                    .getPeerId()
                    .incrementAndGet();
            ps.packetId = PacketStruct.PACKET_TYPE_TEXT;
            ps.time = System.currentTimeMillis();
            ps.senderAddress = InetAddress.getLocalHost();
            ps.payload = msg.getBytes();

            pSender.send(getIsa()
                    .getAddress(), getIsa()
                    .getPort(), ps);
        }
    }
}
